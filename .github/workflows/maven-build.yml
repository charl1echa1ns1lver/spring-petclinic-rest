name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy_app:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Load & cache dependencies
        id: cache-deps
        uses: ./.github/actions/cached-deps
        with:
          caching: 'true'
      - name: Run app
        run: nohup ./mvnw spring-boot:run &
      - name: Wait for the app to start
        run: |
          # Loop till application starts         
              start_time=$(date +%s) # Record start time
              timeout=300 # Timeout duration in seconds
               
              while true; do
              echo "Checking if the app is up..."
              if curl -s --head --request GET http://localhost:9966/petclinic/actuator/health | grep "200" > /dev/null; then
              echo "Application is up!"
              break
              fi
          
          # Check if we've exceeded the timeout
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))
              if [ $elapsed_time -ge $timeout ]; then
              echo "Timeout waiting for the application to start."
              exit 1 # Exit with error if timeout is reached
              fi
               
              echo "Waiting for the application to start..."
              sleep 1
              done 

  API:
    needs: deploy_app
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Bruno API Tests
        id: bru-cli
        uses: krummbar/bruno-run-action@main
        with:
          path: pet-clinic-tests
          # env: integration
          output: output.json
          output-format: json
      - name: Clean up
        run: |
              pids=$(jobs -p)
              if [ -n "$pids" ]; then
              kill $pids
              else
              echo "No background jobs to kill."
              fi



